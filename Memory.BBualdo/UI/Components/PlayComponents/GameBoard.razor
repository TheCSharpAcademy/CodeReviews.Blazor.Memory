@inject GamesService GamesService
@using Data.Models
@using UI.Models
@implements IDisposable

<div class="min-h-screen flex flex-col gap-20 items-center justify-center p-4">
  @if (Board is not null && !IsGameOver)
  {
    <div class="flex justify-between lg:w-[600px] items-center w-full">
      <div class="flex border-2 border-white">
        <div class="bg-white text-black py-2 px-4">Moves</div>
        <div class="bg-black text-white py-2 px-2">@Game!.Moves</div>
      </div>
      <div class="flex border-2 border-white">
        <div class="bg-white text-black py-2 px-4">Time</div>
        <div class="bg-black text-white py-2 px-2">@Game!.Time.ToString(@"mm\:ss")</div>
      </div>
    </div>
    <div class="grid gap-4 @CalculateGrid()">
      @foreach (var card in Board.Cards)
      {
        <MemoCard Card="card" RevealCard="RevealCard"/>
      }
    </div>
  }

  @if (IsGameOver)
  {
    <GameSummary OnTryAgain="TryAgain"/>
  }
</div>


@code {
  private Board? Board { get; set; }
  private Card? FirstRevealedCard { get; set; }
  private Card? SecondRevealedCard { get; set; }
  private bool IsChecking { get; set; }
  private Game? Game { get; set; }
  private bool IsGameOver { get; set; }
  private Timer? Timer { get; set; }

  private string CalculateGrid()
  {
    return Board!.Size switch
    {
      2 => "grid-cols-2",
      4 => "grid-cols-4",
      8 => "grid-cols-4",
      16 => "grid-cols-8",
      _ => ""
    };
  }

  protected override void OnInitialized()
  {
    InitializeBoard();
  }

  private void InitializeBoard()
  {
    Game = GamesService.Game;
    Game.Moves = 0;
    Game.Time = TimeSpan.Zero;
    Board = new Board(GamesService.Game.Difficulty);
    IsGameOver = false;
    Timer = new Timer(CountTime, null, 1000, 1000);
  }

  private async Task RevealCard(Card card)
  {
    if (IsChecking || card.IsRevealed || card.ShouldBeRemoved)
      return;

    card.IsRevealed = true;
    if (FirstRevealedCard is null)
    {
      FirstRevealedCard = card;
      return;
    }

    SecondRevealedCard = card;
    IsChecking = true;
    // Wait 500ms before checking cards pair
    await Task.Delay(500);
    CheckPair(FirstRevealedCard, SecondRevealedCard);
    IsChecking = false;
  }

  private void CheckPair(Card card1, Card card2)
  {
    Game.Moves++;

    if (card1.Id != card2.Id)
    {
      card1.IsRevealed = false;
      card2.IsRevealed = false;
    }
    else
    {
      card1.ShouldBeRemoved = true;
      card2.ShouldBeRemoved = true;
      CheckGameOver();
    }

    FirstRevealedCard = null;
    SecondRevealedCard = null;
  }

  private void CheckGameOver()
  {
    if (Board!.Cards.All(c => c.ShouldBeRemoved))
    {
      IsGameOver = true;
      Timer.Dispose();
    }
  }

  private void CountTime(object? source)
  {
    InvokeAsync(() =>
    {
      Game!.Time = Game.Time.Add(TimeSpan.FromSeconds(1));
      StateHasChanged();
    });
  }

  private void TryAgain()
  {
    GamesService.TryAgain();
    InitializeBoard();
  }

  public void Dispose()
  {
    Timer?.Dispose();
  }

}